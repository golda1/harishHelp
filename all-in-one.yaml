service:
  extensions: [jaeger_storage, jaeger_query, remote_sampling, healthcheckv2, expvar, zpages]
  pipelines:
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [batch]
      exporters: [jaeger_storage_exporter, spanmetrics]
    metrics/spanmetrics:
      receivers: [spanmetrics]
      exporters: [prometheus]
  telemetry:
    resource:
      service.name: jaeger
    metrics:
      level: detailed
      readers:
        - pull:
            exporter:
              prometheus:
                host: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}"
                port: 8888
    logs:
      level: info
    # TODO Initialize telemetry tracer once OTEL released new feature.
    # https://github.com/open-telemetry/opentelemetry-collector/issues/10663

extensions:
  jaeger_query:
    storage:
      traces: some_storage
      metrics: some_metrics_storage
  jaeger_storage:
    backends:
      some_storage:
        # memory:
        #   max_traces: 100000
        cassandra:
          schema: 
            keyspace: "jaeger_v1_test"
            # create: "${env:CASSANDRA_CREATE_SCHEMA:-true}"
          connection:
            auth: 
              basic:
                username: "user"
                password: "password"
            tls:
              insecure: true
    metric_backends:
      some_metrics_storage:
        prometheus:
          endpoint: http://prometheus:9090
          normalize_calls: true
          normalize_duration: true

  remote_sampling:
    # We can either use file or adaptive sampling strategy in remote_sampling
    file:
      path:
      default_sampling_probability: 1
      reload_interval: 1s
    # adaptive:
    #   sampling_store: some_store
    #   initial_sampling_probability: 0.1
    http:
      endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:5778"
    grpc:
      endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:5779"

  healthcheckv2:
    use_v2: true
    http:
      endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:13133"
    grpc:

  expvar:
    endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:27777"

  zpages:
    # for some reason the official extension listens on ephemeral port 55679
    # so we override it with a normal port
    endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:27778"

connectors:
  spanmetrics:

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:4317"
      http:
        endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:4318"

  jaeger:
    protocols:
      grpc:
        endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:14250"
      thrift_http:
        endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:14268"
      thrift_binary:
        endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:6832"
      thrift_compact:
        endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:6831"

  zipkin:
    endpoint: "${env:JAEGER_LISTEN_HOST:-0.0.0.0}:9411"

processors:
  batch:

exporters:
  jaeger_storage_exporter:
    trace_storage: some_storage
  prometheus:
    endpoint: "0.0.0.0:8889"
